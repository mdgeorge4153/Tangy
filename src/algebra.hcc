/*
 * algebra.hcc - inline implementations of algebra.h
 */

inline
Number &
Number::
operator/= (const Number & other)
{
	return (* this) *= other.inv();
}

inline
Number
operator+ (const Number & a, const Number & b)
{
	Number result = a;
	result += b;
	return result;
}

inline
Number
operator- (const Number & a, const Number & b)
{
	Number result = a;
	result -= b;
	return result;
}

inline
Number
operator* (const Number & a, const Number & b)
{
	Number result = a;
	result *= b;
	return result;
}

inline
Number
operator/ (const Number & a, const Number & b)
{
	Number result = a;
	result /= b;
	return result;
}

inline
Number
operator+ (const Number & a, int b)
{
	Number result = a;
	result /= b;
	return result;
}

inline
Number
operator- (const Number & a, int b)
{
	Number result = a;
	result -= b;
	return result;
}

inline
Number
operator* (const Number & a, int b)
{
	Number result = a;
	result *= b;
	return result;
}

inline
Number
operator/ (const Number & a, int b)
{
	Number result = a;
	result /= b;
	return result;
}

inline
Number
operator+ (int a, const Number & b)
{
	Number result = b;
	result += a;
	return result;
}

inline
Number
operator- (int a, const Number & b)
{
	Number result = -b;
	result += a;
	return result;
}

inline
Number
operator* (int a, const Number & b)
{
	Number result = b;
	result *= a;
	return result;
}

inline
Number
operator/ (int a, const Number & b)
{
	Number result = b.inv();
	result *= a;
	return result;
}

inline
Number
operator+ (const Number & a)
{
	return Number(a);
}

inline
Number
operator- (const Number & a)
{
	Number result;
	result -= a;
}

inline
bool
operator!= (const Number & a, const Number & b)
{
	return !(a == b);
}

inline
bool
operator< (const Number & a, const Number & b)
{
	if (a == b)
		return false;

	return a <= b;
}

inline
bool
operator>= (const Number & a, const Number & b)
{
	return b <= a;
}

inline
bool
operator> (const Number & a, const Number & b)
{
	return b < a;
}


template<typename Ch, typename Tr>
void
with_sign(basic_ostream<Ch,Tr>& out, int n)
{
	if (n < 0)
		out << " - " << -n;
	else
		out << " + " <<  n;
}

template<typename Ch, typename Tr>
basic_ostream<Ch, Tr> &
operator<< (basic_ostream<Ch, Tr> & out, const Number & a)
{
	out << "[" << a._n[0];

	with_sign(out, a._n[1]); out << "*sqrt(2)";
	with_sign(out, a._n[2]); out << "*sqrt(3)";
	with_sign(out, a._n[3]); out << "*sqrt(6)";

	out << "]/" << a._d;
}

/*
** vim: syntax=cpp ts=4 sw=4 cindent
*/
