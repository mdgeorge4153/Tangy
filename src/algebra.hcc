/*
 * algebra.hcc - inline implementations of algebra.h
 */

inline
ExtendedRational &
ExtendedRational::
operator/= (const ExtendedRational & other)
{
	return (* this) *= other.inv();
}

inline
ExtendedRational
operator+ (const ExtendedRational & a, const ExtendedRational & b)
{
	ExtendedRational result = a;
	result += b;
	return result;
}

inline
ExtendedRational
operator- (const ExtendedRational & a, const ExtendedRational & b)
{
	ExtendedRational result = a;
	result -= b;
	return result;
}

inline
ExtendedRational
operator* (const ExtendedRational & a, const ExtendedRational & b)
{
	ExtendedRational result = a;
	result *= b;
	return result;
}

inline
ExtendedRational
operator/ (const ExtendedRational & a, const ExtendedRational & b)
{
	ExtendedRational result = a;
	result /= b;
	return result;
}

inline
ExtendedRational
operator+ (const ExtendedRational & a, int b)
{
	ExtendedRational result = a;
	result /= b;
	return result;
}

inline
ExtendedRational
operator- (const ExtendedRational & a, int b)
{
	ExtendedRational result = a;
	result -= b;
	return result;
}

inline
ExtendedRational
operator* (const ExtendedRational & a, int b)
{
	ExtendedRational result = a;
	result *= b;
	return result;
}

inline
ExtendedRational
operator/ (const ExtendedRational & a, int b)
{
	ExtendedRational result = a;
	result /= b;
	return result;
}

inline
ExtendedRational
operator+ (int a, const ExtendedRational & b)
{
	ExtendedRational result = b;
	result += a;
	return result;
}

inline
ExtendedRational
operator- (int a, const ExtendedRational & b)
{
	ExtendedRational result = -b;
	result += a;
	return result;
}

inline
ExtendedRational
operator* (int a, const ExtendedRational & b)
{
	ExtendedRational result = b;
	result *= a;
	return result;
}

inline
ExtendedRational
operator/ (int a, const ExtendedRational & b)
{
	ExtendedRational result = b.inv();
	result *= a;
	return result;
}

inline
ExtendedRational
operator+ (const ExtendedRational & a)
{
	return ExtendedRational(a);
}

inline
ExtendedRational
operator- (const ExtendedRational & a)
{
	ExtendedRational result;
	result -= a;
	return result;
}

inline
bool
operator!= (const ExtendedRational & a, const ExtendedRational & b)
{
	return !(a == b);
}

inline
bool
operator< (const ExtendedRational & a, const ExtendedRational & b)
{
	if (a == b)
		return false;

	return a <= b;
}

inline
bool
operator>= (const ExtendedRational & a, const ExtendedRational & b)
{
	return b <= a;
}

inline
bool
operator> (const ExtendedRational & a, const ExtendedRational & b)
{
	return b < a;
}


template<typename Ch, typename Tr>
void
with_sign(basic_ostream<Ch,Tr>& out, int n)
{
	if (n < 0)
		out << " - " << -n;
	else
		out << " + " <<  n;
}

template<typename Ch, typename Tr>
basic_ostream<Ch, Tr> &
operator<< (basic_ostream<Ch, Tr> & out, const ExtendedRational & a)
{
	int nonzero = 0;
	for (int i = 0; i < 3; i++)
		nonzero += (a._n[i] != 0);

	if (nonzero == 0)
		return out << 0;

	if (nonzero > 1 && a._d != 1)
		out << "[";

	bool first = true;
	std::string labels[4] = {"", "*sqrt(2)", "*sqrt(3)", "*sqrt(6)"};
	for (int i = 0; i < 3; i++)
		if (a._n[i])
		{
			if (first)
				out << a._n[i];
			else
				with_sign(out, a._n[i]);

			out << labels[i];
			first = false;
		}

	if (nonzero > 1 && a._d != 1)
		out << "]";

	if (a._d != 1)
		out << "/" << a._d;

	return out;
}

/*
** vim: syntax=cpp ts=4 sw=4 cindent
*/
