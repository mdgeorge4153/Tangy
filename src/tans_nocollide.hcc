#include <algorithm>

template<typename GameTraits>
void
NoCollideTan<GameTraits>::
flip ()
{
	Tan<GameTraits>::flip();
	_container->_dragged = 0;
	this->set_pos (this->_desired);
}

template<typename GameTraits>
void
NoCollideTan<GameTraits>::
set_pos (const point & pos)
{
	if (_container->_dragged != this)
	{
		_container->_obstruction = ObstacleSet<GameTraits> (this, *_container);
		_container->_dragged = this;
	}

	this->_desired = pos;

	typedef typename GameTraits::number number;
	Tan<GameTraits>::set_pos (_container->_obstruction.snap(_container->_obstruction.closest(pos), 1/number(32)));
}

template<typename GameTraits>
void
NoCollideTan<GameTraits>::
set_rot (const vector & rot)
{
	Tan<GameTraits>::set_rot (rot);

	_container->_dragged = 0;
	this->set_pos (this->_desired);
}

template<typename GameTraits>
template<typename In>
NoCollideTan<GameTraits>::
NoCollideTan(In begin, In end)
	: Tan<GameTraits>(begin, end),
	  _container(0)
{
}

template<typename GameTraits>
void
NoCollideTan<GameTraits>::
set_tanset(tanset * container)
{
	assert(!this->_container);
	this->_container = container;
}

template<typename GameTraits>
NoCollideTanSet<GameTraits>::
NoCollideTanSet ()
	: TanSet<GameTraits> (),
	  _obstruction (),
	  _dragged (0)
{
	std::for_each(this->begin(), this->end(), std::bind2nd(std::mem_fun_ref(&NoCollideTan<GameTraits>::set_tanset), this));
}

template<typename GameTraits>
void
NoCollideTanSet<GameTraits>::
pan (const vector & v)
{
	TanSet<GameTraits>::pan(v);
	this->_dragged = 0;
}

template<typename GameTraits>
const typename NoCollideTanSet<GameTraits>::obstacles &
NoCollideTanSet<GameTraits>::
get_obstacles() const
{
	return _obstruction;
}

/*
** vim: ts=4 sw=4 cindent syntax=cpp
*/
