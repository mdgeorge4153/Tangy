#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <utility>
#include "algebra.h"
#include "utils.h"
#include <CGAL/Kernel_traits.h>
#include <CGAL/Arr_overlay_2.h>
#include <CGAL/IO/Arr_iostream.h>
#include <CGAL/IO/Arr_text_formatter.h>
#include <CGAL/squared_distance_2.h>

#include <iostream>

/*
** Helper function declarations ************************************************
*/

template<typename in, typename out> out convert_from_cgal_point (const in &);
template<typename in, typename out> out convert_from_complex    (const in &);

template<typename cgal_point> struct closest_to_t;
template<typename cgal_point> closest_to_t<cgal_point>         closest_to (const cgal_point &);
template<typename cgal_point> cgal_point                       closest_point_on_segment (const cgal_point &, const cgal_point &, const cgal_point &);
template<typename cgal_point> struct tikz_t;
template<typename cgal_point> tikz_t<cgal_point>               tikz (const cgal_point &);

template<typename point>      bool south_of (const point  & a, const point  & b);
template<typename vector>     bool less_rot (const vector & a, const vector & b);

template<typename Tan, typename Out> Out sum (const Tan &, const Tan &, Out);

template<typename InputIterator, typename arrangement> void join_all  (InputIterator, InputIterator, arrangement &);
template<typename InputIterator, typename arrangement> void make_poly (InputIterator, InputIterator, arrangement &);

template<typename arrangement> void print_tikz (const arrangement &, std::string);

/*
** ObstacleSet Implementation **************************************************
*/

template<typename GameTraits>
ObstacleSet<GameTraits>::
ObstacleSet (const tan * moving, const tanset & fixed)
	: _impl(), _pl()
{
	std::vector<arrangement> polygons;

	//std::cout << "\\documentclass{article}" << std::endl;
	//std::cout << "\\usepackage{tikz}" << std::endl;
	//std::cout << "\\begin{document}" << std::endl;

	for (const_tan_handle i = fixed.begin(); i != fixed.end(); i++)
		if (&(* i) != moving)
		{
			std::vector<point> points;
			sum(* moving, * i, std::back_inserter(points));

			std::vector<cgal_point> cgal_points;
			std::transform (points.begin(), points.end(),
			                std::back_inserter(cgal_points),
			                convert_from_complex<point, cgal_point>);


			polygons.push_back(arrangement());
			make_poly (cgal_points.begin(), cgal_points.end(), polygons.back());
		}

	join_all(polygons.begin(), polygons.end(), _impl);
	_pl.attach(_impl);

	// std::cout << "\\end{document}" << std::endl;
}

template<typename GameTraits>
ObstacleSet<GameTraits>::
ObstacleSet ()
	: _impl(), _pl()
{
	_pl.attach(_impl);
}

template<typename GameTraits>
ObstacleSet<GameTraits> &
ObstacleSet<GameTraits>::
operator= (const ObstacleSet<GameTraits> & other)
{
	//_pl.detach();
	_impl = other._impl;
	_pl.attach(_impl);
	return (*this);
}

template<typename GameTraits>
typename ObstacleSet<GameTraits>::point
ObstacleSet<GameTraits>::
closest (const point & _p) const
{
	typedef typename CGAL::Object                                       object;
	typedef typename arrangement::Face_const_handle                     face;
	typedef typename arrangement::Vertex_const_iterator                 vertex;
	typedef typename arrangement::Halfedge_const_iterator               edge;
	typedef typename arrangement::Hole_const_iterator                   hole;
	typedef typename arrangement::Ccb_halfedge_const_circulator         face_edge;
	typedef typename arrangement::Isolated_vertex_const_iterator        face_vert;

	cgal_point  p = convert_from_complex<point, cgal_point>(_p);

	face   f;
	edge   e;
	vertex v;

	object o = _pl.locate(p);

	if (CGAL::assign(e, o))
		return _p;
	else if (CGAL::assign(v, o))
		return _p;
	assert (CGAL::assign(f, o));

	if (!f->data())
		return _p;

	//
	// iterate over features adjacent to f to find the closest point on each feature
	//
	typedef std::vector<cgal_point> candidate_set;
	candidate_set candidates;

	// isolated vertices
	for (face_vert i = f->isolated_vertices_begin(); i != f->isolated_vertices_end(); i++)
		candidates.push_back(i->point());

	// holes
	for (hole i = f->holes_begin(); i != f->holes_end(); i++)
	{
		face_edge j = *i;
		do
		{
			candidates.push_back(closest_point_on_segment(p, j->source()->point(), j->target()->point()));
		} while (++j != *i);
	}

	// outer edge
	if (!f->is_unbounded())
	{
		face_edge i = f->outer_ccb();
		do
		{
			candidates.push_back(closest_point_on_segment(p, i->source()->point(), i->target()->point()));
		} while (++i != f->outer_ccb());
	}

	//
	// select and return the best candidate
	//
	typename candidate_set::iterator best = std::min_element(candidates.begin(), candidates.end(), closest_to(p));

	return point(best->x(), best->y());
}


template<typename GameTraits>
typename ObstacleSet<GameTraits>::point
ObstacleSet<GameTraits>::
snap (const point & _p, const number & threshold) const
{
	typedef typename arrangement::Vertex_const_iterator vertex;

	cgal_point  p = convert_from_complex<point, cgal_point>(_p);

	vertex     best = std::min_element(_impl.vertices_begin(), _impl.vertices_end(), closest_to(p));

	if (CGAL::squared_distance(p, best->point()) <= threshold)
		return point(best->point().x(), best->point().y());

	return _p;
}



template<typename GameTraits>
const typename ObstacleSet<GameTraits>::arrangement &
ObstacleSet<GameTraits>::
get_impl() const
{
	return _impl;
}

/*
** CGAL type traits for ExtendedRationals **************************************
*/

namespace CGAL {
	template<>
	class Algebraic_structure_traits<ExtendedRational>
		: public Algebraic_structure_traits_base<ExtendedRational, Field_tag>
	{
	};

	template<>
	class Real_embeddable_traits<ExtendedRational>
		: public INTERN_RET::Real_embeddable_traits_base<ExtendedRational, Tag_true>
	{
	};
}

/*
** Nef policy implementation ***************************************************
*/

/*
** Arrangement policy implementation *******************************************
*/

template<typename arrangement>
struct union_traits
{
	typedef typename arrangement::Vertex_const_handle   Vertex_handle_A,   Vertex_handle_B;
	typedef typename arrangement::Halfedge_const_handle Halfedge_handle_A, Halfedge_handle_B;
	typedef typename arrangement::Face_const_handle     Face_handle_A,     Face_handle_B;

	typedef typename arrangement::Vertex_handle   Vertex_handle_R;
	typedef typename arrangement::Halfedge_handle Halfedge_handle_R;
	typedef typename arrangement::Face_handle     Face_handle_R;

	inline void create_vertex (Vertex_handle_A   a, Vertex_handle_B   b, Vertex_handle_R r) {r->set_data(false);}
	inline void create_vertex (Vertex_handle_A   a, Halfedge_handle_B b, Vertex_handle_R r) {r->set_data(false);}
	inline void create_vertex (Vertex_handle_A   a, Face_handle_B     b, Vertex_handle_R r) {r->set_data(b->data());}
	inline void create_vertex (Halfedge_handle_A a, Vertex_handle_B   b, Vertex_handle_R r) {r->set_data(false);}
	inline void create_vertex (Halfedge_handle_A a, Halfedge_handle_B b, Vertex_handle_R r) {r->set_data(false);}
	inline void create_vertex (Face_handle_A     a, Vertex_handle_B   b, Vertex_handle_R r) {r->set_data(a->data());}

	inline void create_edge (Halfedge_handle_A a, Halfedge_handle_B b, Halfedge_handle_R r) {r->set_data(false);     r->twin()->set_data(false);}
	inline void create_edge (Halfedge_handle_A a, Face_handle_B     b, Halfedge_handle_R r) {r->set_data(b->data()); r->twin()->set_data(b->data());}
	inline void create_edge (Face_handle_A     a, Halfedge_handle_B b, Halfedge_handle_R r) {r->set_data(a->data()); r->twin()->set_data(a->data());}

	inline void create_face (Face_handle_A a, Face_handle_B b, Face_handle_R r)             {r->set_data(a->data() || b->data());}
};

template<typename arrangement>
void
join (const arrangement & a, const arrangement & b, arrangement & result)
{
	typedef typename arrangement::Vertex_iterator vertex;
	typedef typename arrangement::Edge_iterator   edge;

	union_traits<arrangement> ut;
	CGAL::overlay (a, b, result, ut);

	std::vector<edge> extra_edges;

	for (edge e = result.edges_begin(); e != result.edges_end(); e++)
		if (e->data())
			result.remove_edge(e, false, false);

	for (vertex v = result.vertices_begin(); v != result.vertices_end(); v++)
		if (v->data())
			result.remove_isolated_vertex(v);
}

template<typename InputIterator, typename arrangement>
void
join_all (InputIterator begin, InputIterator end, arrangement & out)
{
	assert (begin != end);

	if (end - begin == 1)
		out = *begin;

	else
	{
		arrangement left, right;
		InputIterator mid = begin + (end - begin) / 2;
		join_all (begin, mid, left);
		join_all (mid, end, right);

		join (left, right, out);
	}
}

/*
** Helper functions ************************************************************
*/

/*
 * closest_to(p) returns a comparator that ranks points by
 * their distance from p
 */
template<typename cgal_point>
struct closest_to_t
{
	const cgal_point & _p;

	closest_to_t (const cgal_point & p)
		: _p(p)
	{
	}

	bool operator() (const cgal_point & a, const cgal_point & b)
	{
		return CGAL::compare_distance_to_point (_p, a, b) == CGAL::SMALLER;
	}

	template<typename V>
	bool operator() (const V & a, const V & b)
	{
		return this->operator() (a.point(), b.point());
	}
};

template<typename cgal_point>
closest_to_t<cgal_point>
closest_to (const cgal_point & p)
{
	return closest_to_t<cgal_point> (p);
}

/* turns std::complex style points into other representations */
template<typename in, typename out>
out
convert_from_complex (const in & p)
{
	return out(p.real(), p.imag());
}

/* turns CGAL::Point_2 style points into other representations.  */
template<typename in, typename out>
out
convert_from_cgal_point (const in & p)
{
	return out(p.x(), p.y());
}

/*
 * less_rot is a comparator that ranks vectors by the angle
 * they form with the x-axis
 */
template<typename vector>
bool
less_rot (const vector & a, const vector & b)
{
	typedef typename vector::value_type number;

	if (a.imag() > number(0) && b.imag() < number(0))
		// angle(a) < 180 < angle(b)
		return true;
	else if (a.imag() < number(0) && b.imag() > number(0))
		// angle(b) < 180 < angle(a)
		return false;
	else
		// a and b are in same half-plane so
		// -180 < angle(a) - angle(b) < 180
		return (a * std::conj(b)).imag() < number(0);
}

/*
 * south_of is a copmarator that ranks points by their y
 * component.
 */
template<typename point>
bool
south_of (const point & a, const point & b)
{
	return a.imag() < b.imag();
}

/*
 * sum outputs the minkowski sum of two tans into an
 * output_iterator<point>.
 */
template<typename tan, typename Out>
Out
sum (const tan & moving, const tan & fixed, Out out)
{
	typedef typename tan::point          point;
	typedef typename std::vector<point>  container;
	typedef typename container::iterator iterator;

	// let fps and mps be the points of fixed and moving respectively
	container fps, mps;
	fixed .points(std::back_inserter(fps));
	moving.points(std::back_inserter(mps));

	// flip moving tan
	std::transform(mps.begin(), mps.end(), mps.begin(), std::negate<point> ());

	// find southmost vertices
	iterator fmin = std::min_element(fps.begin(), fps.end(), south_of<point>);
	iterator mmin = std::min_element(mps.begin(), mps.end(), south_of<point>);

	// reorder both so that the southmost vertex is last
	std::rotate(fps.begin(), ++fmin, fps.end());
	std::rotate(mps.begin(), ++mmin, mps.end());

	// convert to lists of vectors
	point fsouth = circular_difference (fps.begin(), fps.end(), fps.begin());
	point msouth = circular_difference (mps.begin(), mps.end(), mps.begin());

	// merge sort vectors by the angle they form with the x-axis
	container result;
	std::merge(fps.begin(), fps.end(), mps.begin(), mps.end(), std::back_inserter(result), less_rot<point>);

	// turn the vectors back into points
	return circular_sum (result.begin(), result.end(), out, fsouth + msouth + moving.pos());
}

template<typename cgal_point>
cgal_point
closest_point_on_segment (const cgal_point & p, const cgal_point & source, const cgal_point & target)
{
	typedef typename CGAL::Kernel_traits<cgal_point>::Kernel::RT number;

	number dot = (p - source) * (target - source);

	if (dot < number(0))
		return source;

	else if (dot > (target - source) * (target - source))
		return target;

	else
		return source + dot * (target - source) / ((target - source) * (target - source));
}

template<typename InputIterator, typename Arrangement>
void
make_poly (InputIterator begin, InputIterator end, Arrangement & result)
{
	typedef typename Arrangement::Point_2               point;
	typedef typename Arrangement::X_monotone_curve_2    segment;

	typedef typename Arrangement::Halfedge_handle       edge;
	typedef typename Arrangement::Vertex_handle         vertex;

	if (begin == end)
		return;

	point  first_point = *begin++;
	vertex first_vert  = result.insert_in_face_interior(first_point, result.unbounded_face());

	point  prev_point  = first_point;
	vertex prev_vert   = first_vert;

	int n_points = 1;

	while (begin != end)
	{
		point  next_point = *begin++;
		vertex next_vert  = result.insert_in_face_interior (next_point, result.unbounded_face());

		result.insert_at_vertices (segment(prev_point, next_point), prev_vert, next_vert);

		prev_point = next_point;
		prev_vert  = next_vert;
		
		n_points++;
	}

	if (n_points >= 2)
	{
		edge e = result.insert_at_vertices (segment(prev_point, first_point), prev_vert, first_vert);
		e->face()->set_data(true);
		e->twin()->face()->set_data(false);
	}

	for (vertex v = result.vertices_begin(); v != result.vertices_end(); v++)
		v->set_data(false);

	for (edge e = result.halfedges_begin(); e != result.halfedges_end(); e++)
		e->set_data(false);
}

template<typename point>
struct tikz_t
{
	const point & _p;
	tikz_t (const point & p) : _p(p) {}
};

template<typename point>
tikz_t<point>
tikz (const point & p)
{
	return tikz_t<point> (p);
}

template<typename Ch, typename Tr, typename point>
typename std::basic_ostream<Ch,Tr> &
operator<< (typename std::basic_ostream<Ch,Tr> & out, const tikz_t<point> & t)
{
	return out << "(" << float(t._p.x()) << "," << float(t._p.y()) << ")";
}

template<typename arrangement>
void
print_tikz (const arrangement & arr, std::string tag)
{
	typedef typename arrangement::Vertex_const_iterator vertex;
	typedef typename arrangement::Edge_const_iterator   edge;

	for (vertex v = arr.vertices_begin(); v != arr.vertices_end(); v++)
		std::cout << "\\draw[" << tag << "] " << tikz(v->point()) << " circle (2pt);" << std::endl;

	for (edge e = arr.edges_begin(); e != arr.edges_end(); e++)
		std::cout << "\\draw[" << tag << "] " << tikz(e->source()->point()) << " -- " << tikz(e->target()->point()) << ";" << std::endl;
}

/*
** vim: ts=4 sw=4 cindent syntax=cpp
*/
